// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockioAdapter is an autogenerated mock type for the ioAdapter type
type MockioAdapter struct {
	mock.Mock
}

type MockioAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockioAdapter) EXPECT() *MockioAdapter_Expecter {
	return &MockioAdapter_Expecter{mock: &_m.Mock}
}

// Input provides a mock function with given fields:
func (_m *MockioAdapter) Input() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Input")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockioAdapter_Input_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Input'
type MockioAdapter_Input_Call struct {
	*mock.Call
}

// Input is a helper method to define mock.On call
func (_e *MockioAdapter_Expecter) Input() *MockioAdapter_Input_Call {
	return &MockioAdapter_Input_Call{Call: _e.mock.On("Input")}
}

func (_c *MockioAdapter_Input_Call) Run(run func()) *MockioAdapter_Input_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockioAdapter_Input_Call) Return(_a0 string, _a1 error) *MockioAdapter_Input_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockioAdapter_Input_Call) RunAndReturn(run func() (string, error)) *MockioAdapter_Input_Call {
	_c.Call.Return(run)
	return _c
}

// Output provides a mock function with given fields: content
func (_m *MockioAdapter) Output(content string) {
	_m.Called(content)
}

// MockioAdapter_Output_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Output'
type MockioAdapter_Output_Call struct {
	*mock.Call
}

// Output is a helper method to define mock.On call
//   - content string
func (_e *MockioAdapter_Expecter) Output(content interface{}) *MockioAdapter_Output_Call {
	return &MockioAdapter_Output_Call{Call: _e.mock.On("Output", content)}
}

func (_c *MockioAdapter_Output_Call) Run(run func(content string)) *MockioAdapter_Output_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockioAdapter_Output_Call) Return() *MockioAdapter_Output_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockioAdapter_Output_Call) RunAndReturn(run func(string)) *MockioAdapter_Output_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockioAdapter creates a new instance of MockioAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockioAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockioAdapter {
	mock := &MockioAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
